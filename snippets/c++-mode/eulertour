# name: euler tour
# key: eulertour
# --
struct EulerTour {
  vector<vector<int>> g;
  vec<int> post;
  vec<int> pre;
  const size_t size;
  EulerTour(size_t sz) : size(sz) { g.resize(sz); }
  void add_edge(size_t src, size_t dst) {
    g[src].push_back(dst);
    g[dst].push_back(src);
  }
  // v={(pre[i],post[i]),}を返却する。
  // preとpostは通し番号
  // iを根とする部分木ならseg.query(v[i].first, v[i].second)
  // i,jまでのパスならseg.query(v[i].first, v[j].first+1)
  // size*2のsegに対して事前にseg.set(v[i].first, val)すること
  vector<pair<int, int>> build(int root = 0) {
    post.resize(size, -1);
    pre.resize(size, -1);
    int ord = 0;
    vector<pair<int, int>> v;
    _rec(root, root, ord);
    for (size_t i = 0; i < size; ++i) {
      v.push_back(make_pair(pre[i], post[i]));
    }
    return v;
  }
  void _rec(int curr, int prev, int& ord) {
    pre[curr] = ord++;
    for (const auto& next: g[curr]) {
      if (next != prev) _rec(next, curr, ord);
    }
    post[curr] = ord++;
  }
};
