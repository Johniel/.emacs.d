# -*- mode: snippet -*-
# name: lazy segment tree
# key: lazysegtree
# --
template<typename S, typename F>
class LazySegTree {
public:
  using op_fn = function<S(S, S)>;
  using mapping_fn = function<S(F, S)>;
  using composition_fn = function<F(F, F)>; // composition(f(x), g(x)):=f(g(x))

  LazySegTree(size_t n_, op_fn op_, mapping_fn mapping_, composition_fn composition_, S e_, F id_)
    : n(n_), op(op_), mapping(mapping_), composition(composition_), e(e_), id(id_), bitceiln(bit_ceil(n_)) {
    value.resize(bitceiln * 2, e);
    lazy.resize(bitceiln * 2, id);
  }

  S set(size_t i, S x) {
    assert(i < n);
    get(i);
    i += bitceiln;
    value[i] = x;
    while (1 < i) {
      i /= 2;
      value[i] = op(value.at(i * 2 + 0), value.at(i * 2 + 1));
    }
    return x;
  }

  S get(size_t i) {
    assert(i < n);
    i += bitceiln;
    for (int j = 30; 0 <= j; --j) push(i >> j);
    return value.at(i);
  }

  S query(size_t begin, size_t end) {
    assert(begin <= end);
    assert(end <= n);
    return query(begin, end, 1, 0, bitceiln);
  }
  S prod(size_t begin, size_t end) { return query(begin, end); }

  S query(void) { return query(0, n); };
  S all_prod(void) { return query(0, n); }

  void apply(size_t i, F f) { apply(i, i + 1, f); return ; }
  void apply(size_t begin, size_t end, F f) {
    assert(begin <= end);
    assert(end <= n);
    apply(begin, end, f, 1, 0, bitceiln);
    return ;
  }

  void show(ostream& os, int idx = 1, int indent = 0) const {
    if (idx < value.size()) {
      os << string(indent, ' ') << make_pair(value[idx], lazy[idx]) << endl;
      show(os, idx * 2 + 0, indent + 2);
      show(os, idx * 2 + 1, indent + 2);
    }
    return ;
  }

  size_t size(void) const { return n; }

private:
  vector<S> value;
  vector<F> lazy;
  const int bitceiln;
  const size_t n;

  const op_fn op;
  const composition_fn composition;
  const mapping_fn mapping;
  const S e;
  const F id;

  void push(int k) {
    if(2 * k + 1 < lazy.size()) {
      lazy[2 * k + 0] = composition(lazy[k], lazy[2 * k + 0]);
      lazy[2 * k + 1] = composition(lazy[k], lazy[2 * k + 1]);
    }
    value.at(k) = mapping(lazy.at(k), value.at(k));
    lazy.at(k) = id;
    return ;
  }

  S apply(size_t begin, size_t end, F f, size_t k, size_t l, size_t r) { // kだけ1origin,他は0origin
    push(k);
    if (r <= begin || end <= l) return value[k];

    if (begin <= l && r <= end) {
      lazy[k] = composition(f, lazy[k]);
      push(k);
      return value[k];
    } else {
      S vl = apply(begin, end, f, k * 2 + 0, l, (l + r) / 2);
      S vr = apply(begin, end, f, k * 2 + 1, (l + r) / 2, r);
      return value[k] = op(vl, vr);
    }
  }

  S query(size_t begin, size_t end, size_t k, size_t l, size_t r) { // kだけ1origin,他は0origin
    if (r <= begin || end <= l) return e;
    push(k);

    if (begin <= l && r <= end) {
      return value[k];
    } else {
      S vl = query(begin, end, k * 2 + 0, l, (l + r) / 2);
      S vr = query(begin, end, k * 2 + 1, (l + r) / 2, r);
      return op(vl, vr);
    }
  }
};
template<typename S, typename F> ostream& operator << (ostream& os, LazySegTree<S, F> seg) { seg.show(os); return os; }

using S = X;
using F = X;
using lazy_segtree = LazySegTree<S, F>;
lazy_segtree::op_fn op = [] (S a, S b) {};
lazy_segtree::mapping_fn mapping = [] (F a, S b) {};
lazy_segtree::composition_fn composition = [] (F a, F b) {}; // composition(f(x), g(x)):=f(g(x))
lazy_segtree seg(, op, mapping, composition, ,);
