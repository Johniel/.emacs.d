# -*- mode: snippet -*-
# name: dinic
# key: dinic
# --
namespace {
  // verified: ABBC274G,ARC031D
  template<typename Cap = long long int, int N=2>
  struct Dinic {
    struct E {
      int src, dst;
      Cap cap, flow;
      int rev;
      E(int s, int d, Cap c, int r) : src(s), dst(d), cap(c), flow(0), rev(r) {}
      Cap residual() const { return cap - flow; }
    };

    array<vector<E>, N> g;
    array<int, N> idx;
    array<int, N> dist;
    Dinic() {}

    void init(void)
    {
      fill(g.begin(), g.end(), array<vector<E>, N>());
    }

    void add_edge(int src, int dst, Cap c)
    {
      int a = g[src].size();
      int b = g[dst].size();
      g[src].push_back(E(src, dst, c, b));
      g[dst].push_back(E(dst, src, 0, a));
      return ;
    }

    bool bfs(const int src, const int dst)
    {
      const int inf = 1 << 29;
      fill(dist.begin(), dist.end(), inf);
      queue<int> q;
      dist[src] = 0;
      for (q.push(src); q.size(); q.pop()) {
        each (e, g[q.front()]) {
          if (0 < e.residual() && dist[e.dst] == inf) {
            dist[e.dst] = dist[e.src] + 1;
            q.push(e.dst);
          }
        }
      }
      return dist[dst] != inf;
    }

    Cap rec(int curr, const int snk, Cap flow)
    {
      if (curr == snk) return flow;
      for (; idx[curr] < g[curr].size(); ++idx[curr]) {
        E& e = g[curr][idx[curr]];
        if (0 < e.residual() && dist[e.src] < dist[e.dst]) {
          Cap f = rec(e.dst, snk, min(flow, e.residual()));
          if (0 < f) {
            e.flow += f;
            g[e.dst][e.rev].flow -= f;
            return f;
          }
        }
      }
      return 0;
    }

    Cap run(const int src, const int snk)
    {
      Cap sum = 0;
      while (bfs(src, snk)) {
        fill(idx.begin(), idx.end(), 0);
        for (Cap f; 0 < (f = rec(src, snk, numeric_limits<Cap>::max())); sum += f) ;
      }
      return sum;
    }
  };
};

namespace {
  // ABC285G
  // 流量の下限と上限が決まっている最大流
  template<typename Cap = long long int, int N=2>
  struct DinicLowerBound {
    const int S;
    const int T;
    Cap sum_mn;
    Dinic<Cap, N+2> dinic;

    DinicLowerBound() : S(N), T(N + 1), sum_mn(0) {}

    void add_edge(int src, int dst, Cap mn, Cap mx)
    {
      assert(0 <= mn);
      assert(mn <= mx);

      sum_mn += mn;

      dinic.add_edge(src, dst, mx - mn);
      dinic.add_edge(S, dst, mn);
      dinic.add_edge(src, T, mn);
      return ;
    }

    void add_edge(int src, int dst, Cap mx)
    {
      return add_edge(src, dst, 0, mx);
    }

    Cap run(int src, int snk)
    {
      Cap a = dinic.run(S, T);
      Cap b = dinic.run(src, T);
      Cap c = dinic.run(S, snk);
      Cap d = dinic.run(src, snk);
      return a + c == sum_mn && a + b == sum_mn ? b + d : -1;
    }
  };
};
