# -*- mode: snippet -*-
# name: auxiliary tree
# key: auxiliarytree
# --
// 指定された頂点集合の最小共通祖先関係を保ったまま木を圧縮した補助的な木
// 頂点集合Xに対して構築がO(|X|*log元の木のサイズ)
// ABC340G
// a.k.a VirtualTree
namespace auxiliary_tree {
  const int N = 2 * 1e5 + 3;

  namespace LCA {
    int parent[N];

    const int LOG2N = log2(N) + 1;
    int T[N][LOG2N], L[N];

    int addLevel(int node)
    {
      if (L[node] != -1) return L[node];
      else return L[node] = addLevel(parent[node]) + 1;
    }

    // ! keep parent[root] = root
    void build(const int n, const int root = 0)
    {
      assert(1 <= n);
      assert(parent[root] == root);
      fill(L, L + n, -1);
      L[root] = 0;
      for (int i = 0; i < n; ++i) {
        L[i] = addLevel(i);
      }

      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < LOG2N; ++j) {
          T[i][j] = -1;
        }
      }
      for (int i = 0; i < n; ++i) {
        T[i][0] = parent[i];
      }
      for (int j = 1; (1 << j) < n; ++j) {
        for (int i = 0; i < n; ++i) {
          if (T[i][j - 1] != -1) {
            T[i][j] = T[T[i][j - 1]][j - 1];
          }
        }
      }
      return ;
    }

    int query(int a, int b)
    {
      if (L[a] < L[b]) swap(a, b);

      int lg = 1;
      while ((1 << lg) <= L[a]) ++lg;
      --lg;

      for (int i = lg; 0 <= i; --i) {
        if (L[a] - (1 << i) >= L[b]) {
          a = T[a][i];
        }
      }

      if (a == b) return a;
      for (int i = lg; 0 <= i; --i) {
        if (T[a][i] != -1 && T[a][i] != T[b][i]) {
          a = T[a][i];
          b = T[b][i];
        }
      }
      return parent[a];
    }
  };

  int preord[N];
  int preord_end[N];
  vec<int> g[N];
  int cnt;

  void rec(int curr, int prev)
  {
    LCA::parent[curr] = prev;
    preord[curr] = cnt++;
    each (next, g[curr]) {
      if (next == prev) continue;
      rec(next, curr);
    }
    preord_end[curr] = cnt;
    return ;
  }

  void init(const int n) {
    fill(g, g + n, vec<int>());
    return ;
  }

  void build(const int n) {
    fill(preord, preord + n, -1);
    cnt = 0;
    for (int i = 0; i < n; ++i) {
      if (preord[i] == -1) rec(i, i);
    }
    LCA::build(n);
    return ;
  }

  // 圧縮後の木の頂点列（preord順）
  vector<int> vertexes(vector<int> x) {
    sort(x.begin(), x.end(), [&] (int a, int b) { return preord[a] < preord[b]; });
    vector<int> y = x;
    for (int i = 0; i + 1 < x.size(); ++i) {
      y.push_back(LCA::query(x[i], x[i + 1]));
    }
    sort(y.begin(), y.end());
    y.erase(unique(y.begin(), y.end()), y.end());
    sort(y.begin(), y.end(), [&] (int a, int b) { return preord[a] < preord[b]; });
    return y;
  }

  // 圧縮後の木の{根,辺}
  pair<int, vector<pair<int, int>>> query(vector<int> x) {
    vector<int> vs = vertexes(x);
    vector<int> stk;
    vector<pair<int, int>> es;
    for (const auto& i: vs) {
      while (stk.size() && preord_end[stk.back()] <= preord[i]) {
        stk.pop_back();
      }
      if (stk.size()) {
        es.push_back(make_pair(stk.back(), i));
      }
      stk.push_back(i);
    }
    return make_pair(stk.front(), es);
  }
};
