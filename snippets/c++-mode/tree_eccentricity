# -*- mode: snippet -*-
# name: tree_eccentricity
# key: treeeccentricity
# --
// 木の各頂点から最も遠い点までの距離を求める。
struct TreeEccentricity {
  vector<vector<int>> g;
  vector<int> eccentricity;
  TreeEccentricity() : TreeEccentricity(0) {}
  TreeEccentricity(const int n) {
    g.resize(n, vector<int>());
  }
  void add_edge(int a, int b) {
    g[a].push_back(b);
    g[b].push_back(a);
  }
  void rec(int curr, int prev, vector<int>& dist) {
    if (curr != prev) dist[curr] = dist[prev] + 1;
    for (const auto next: g[curr]) {
      if (next != prev) rec(next, curr, dist);
    }
  }
  pair<int, pair<int, int>> build(void) {
    vector<int> v_(g.size(), 0);
    vector<int> va(g.size(), 0);
    vector<int> vb(g.size(), 0);
    rec(0, 0, v_);
    int a = max_element(v_.begin(), v_.end()) - v_.begin();
    rec(a, a, va);
    int b = max_element(va.begin(), va.end()) - va.begin();
    rec(b, b, vb);
    for (int i = 0; i < g.size(); ++i) {
      eccentricity.push_back(max(va[i], vb[i]));
    }
    const int diameter = *max_element(eccentricity.begin(), eccentricity.end());
    assert(diameter == eccentricity[a]);
    return make_pair(diameter, make_pair(a, b));
  }
};
