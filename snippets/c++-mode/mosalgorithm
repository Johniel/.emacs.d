# -*- mode: snippet -*-
# name: mo's algorithm
# key: mos
# --
namespace Mo {
  // ABC242G
  using Add = function<void(int)>;
  using Del = function<void(int)>;
  using Report = function<void(int)>;

  inline bool cmp(int N, const pair<int, int>& a, const pair<int, int>& b)
  {
    if (a.first / N != b.first / N) return a.first / N < b.first / N;
    // 左端の偶奇で昇順降順を分けると定数倍がましになるらしい？
    if ((a.first / N) % 2) {
      return a.second > b.second;
    } else {
      return a.second < b.second;
    }
  }

  // ある区間の解が分かっている状態で、その両端のどちらかを±1した区間の解がO(α)で求まるときに
  // 区間に対するクエリ列てに対してO(αQ√N)で答える。
  // ※クエリは半開区間。
  void run(
    const int N,
    vec<pair<int, int>> qs,
    Add add_left,
    Del del_left,
    Add add_right,
    Del del_right,
    Report report)
  {
    vec<int> idx(qs.size());
    iota(idx.begin(), idx.end(), 0);
    sort(idx.begin(), idx.end(), [&] (auto i, auto j) {
      int n = N / min<int>(N, sqrt(N));
      return cmp(n, qs[i], qs[j]);
    });
    int begin = 0;
    int end = 0;
    each (i, idx) {
      while (begin > qs[i].first) add_left(--begin);
      while (end < qs[i].second) add_right(end++);
      while (begin < qs[i].first) del_left(begin++);
      while (end > qs[i].second) del_right(--end);
      report(i);
    }
    return ;
  }
};
