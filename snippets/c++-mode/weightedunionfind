# -*- mode: snippet -*-
# name: WeightedUnionFind
# key: weightedunionfind
# --
template<typename Weight>
struct WeightedUnionFind {
  // abc280F,
  vector<int> r;
  vector<int> p;
  vector<Weight> dw;

  WeightedUnionFind(int n)
  {
    r.resize(n, 0);
    p.resize(n, -1);
    dw.resize(n, 0);
  }

  int find(int x)
  {
    if (p[x] < 0) return x;
    int y = find(p[x]);
    dw[x] += dw[p[x]];
    return p[x] = y;
  }

  // weight(y) = weight(x) + w
  bool unite(int x, int y, Weight w)
  {
    w = w + weight(x) - weight(y);
    x = find(x);
    y = find(y);
    if (x == y) return false;
    if (r[x] < r[y]) {
      swap(x, y);
      w = -w;
    }
    p[y] = x;
    dw[y] = w;
    if (r[x] == r[y]) ++r[y];
    return true;
  }

  Weight weight(int x) { find(x); return dw[x]; }
  // weight(x) - weight(x) if same(x, y)
  Weight diff(int src, int dst) { assert(same(src, dst)); return weight(dst) - weight(src); }
  size_t size(int x) { return -p.at(find(x)); }
  bool same(int x, int y) { return find(x) == find(y); }
};
