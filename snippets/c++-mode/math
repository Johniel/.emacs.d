# -*- mode: snippet -*-
# name: math
# key: math
# --
namespace math {
  lli fact[N], finv[N], inv[N];

  void init(void)
  {
    fact[0] = fact[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < N; i++){
      fact[i] = fact[i - 1] * i % mod;
      inv[i] = mod - inv[mod % i] * (mod / i) % mod;
      finv[i] = finv[i - 1] * inv[i] % mod;
    }
    return ;
  }

  lli mod_comb(int n, int k)  // 必要に応じてlucasの定理を使うこと
  {
    assert(n < N && k < N);
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fact[n] * (finv[k] * finv[n - k] % mod) % mod;
  }

  inline long long int nCk(int n, int k) { return mod_comb(n, k); }

  // n個の箱にm個の何かを分配する場合の数
  inline long long int nHm(int n, int m) { return nCk(n + m - 1, m); }

  // ∑{k=0...n} pCk * qC(n-k) = (p+q)Cn ※ p<k && pCk=0
  // https://manabitimes.jp/math/622
  inline long long int vandermonde_convolution(int p, int q, int n) { return nCk(p + q, n); }
};

namespace math {
  // gcd(a,b)を返す。xとyにはax+by=±gcd(a,b)を満たす数を設定する。
  lli extgcd(lli a, lli b, lli& x, lli& y)
  {
    lli g = a;
    x = 1;
    y = 0;
    if (b != 0) {
      g = extgcd(b, a % b, y, x);
      y -= (a / b) * x;
    }
    return g;
  }

  lli mod_inverse(lli a, lli m)
  {
    lli x, y;
    extgcd(a, m, x, y);
    return (m + x % m) % m;
  }

  lli mod_pow(lli n, lli p, lli M = mod)
  {
    if (p == 0) return 1;
    if (p == 1) return n % M;
    lli m = mod_pow(n, p / 2, M);
    m *= m;
    m %= M;
    if (p % 2) m = (m * n) % M;
    return m;
  }

  // ai * x = bi (mod mi)
  // 蟻本P.261
  // x=b(mod m)の(b,m)を返す
  pair<lli, lli> liner_congruence(const vector<lli>& A, const vector<lli>& B, const vector<lli>& M)
  {
    lli x = 0, m = 1;
    for (int i = 0; i < A.size(); ++i) {
      lli a = A[i] * m;
      lli b = B[i] - A[i] * x;
      lli d = __gcd(M[i], a);
      if (b % d) return make_pair(-1, -1);
      lli t = b / d * mod_inverse(a / d, M[i] / d) % (M[i] / d);
      x = x + m * t;
      m *= M[i] / d;
    }
    return {x % m, m};
  }

  // bi = r (mod mi)となる(r,mod)を返す
  // 解なしなら(0,-1)
  pair<lli, lli> chinese_remainder_theorem(const vector<lli> &b, const vector<lli> &m)
  {
    lli r = 0;
    lli M = 1;
    for (int i = 0; i < b.size(); ++i) {
      lli p, q;
      lli d = extgcd(M, m[i], p, q);
      if ((b[i] - r) % d != 0) return make_pair(0, -1);
      lli tmp = (b[i] - r) / d * p % (m[i]/d);
      r += M * tmp;
      M *= m[i]/d;
    }
    return make_pair((r + M) % M, M);
  }

  // https://manabitimes.jp/math/1324
  // nCk (mod p)
  // 充分に小さい素数pを指定すること。nCkの遇奇を計算するのに便利。
  lli lucas(int n, int k, int p)
  {
    lli x = 1;
    while (n || k) {
      x *= math::mod_comb(n % p, k % p);
      x %= p;
      n /= p;
      k /= p;
    }
    return x;
  }
};

namespace math {
  // nと互いに素である1以上n以下の自然数の個数
  // オイラーの定理 x^φ(m)≡1(mod m) xとmは互いに素
  template<typename T=long long int>
  T euler_phi(T n)
  {
    T x = n;
    for (T i = 2; i * i <= n; ++i) {
      if (n % i == 0) {
        while (n % i == 0) n /= i;
        x -= x / i;
      }
    }
    if (n != 1) x -= x / n;
    return x;
  }

  lli isqrt(lli x)
  {
    if (x == 0) return 0;
    lli sqrtx = sqrt(x) - 1;
    while (sqrtx + 1 <= x / (sqrtx + 1)) {
      sqrtx++;
    }
    return sqrtx;
  }

  template<std::integral T>
  T floor(T x, T div) {
    // ABC334B
    assert(div != T(0));
    T r = !!(x % div);
    return x / div - ((x < 0) != (div < 0) ? r : 0);
  }

  template<std::integral T>
  T ceil(T x, T div) {
    // ABC334B
    assert(div != T(0));
    T r = !!(x % div);
    return x / div + ((x < 0) == (div < 0) ? r : 0);
  }

  // 約数列挙
  // https://qiita.com/drken/items/3beb679e54266f20ab63#4-2-%E9%AB%98%E9%80%9F%E7%B4%84%E6%95%B0%E5%88%97%E6%8C%99

  // 1以上n以下でxと互いに素な数の総和%mod
  lli sum_coprime(int n, int x, const lli mod)
  {
    if (x == 1) return lli(n) * (n + 1) / 2;
    vec<lli> pf;
    for (lli i = 2; i * i <= x; ++i) {
      if (x % i == 0) {
        pf.push_back(i);
        while (x % i == 0) x /= i;
      }
    }
    if (x != 1) pf.push_back(x);
    lli z = 0;
    for (int bit = 0; bit < (1 << pf.size()); ++bit) {
      lli y = 1;
      for (int i = 0; i < pf.size(); ++i) {
        if (bit & (1 << i)) y *= pf[i];
      }
      lli m = (n / y) % mod;
      lli s = (m * (m + 1) / 2) % mod * y % mod;
      if (__builtin_popcount(bit) % 2) {
        z = (z - s + mod) % mod;
      } else {
        (z += s) %= mod;
      }
    }
    return z;
  }
}

namespace math {
  const int N = 100;
  long long int nck[N][N]; // nck[i][j] = num of x s.t. 0<=x<(2^i), popcount(x)=j
  long long int sum[N][N]; // sum[i][j] = sum of x s.t. 0<=x<(2^i), popcount(x)=j
  void init(void)
  {
    vector<long long int> p2(N + 1);
    p2[0] = 1;
    for (size_t i = 1; i < p2.size(); ++i) {
      p2[i] = p2[i - 1] * 2 % mod;
    }
    fill(&nck[0][0], &nck[N - 1][N - 1] + 1, 0);
    fill(&sum[0][0], &sum[N - 1][N - 1] + 1, 0);
    nck[0][0] = 1;
    for (int i = 0; i + 1 < N; ++i) {
      for (int j = 0; j < i + 1; ++j) {
        (nck[i + 1][j + 0] += nck[i][j]) %= mod;
        (nck[i + 1][j + 1] += nck[i][j]) %= mod;
        (sum[i + 1][j + 0] += sum[i][j]) %= mod;
        (sum[i + 1][j + 1] += sum[i][j]) %= mod;
        (sum[i + 1][j + 1] += p2[i] * nck[i][j] % mod) %= mod;
      }
    }
    return ;
  }
};
