# -*- mode: snippet -*-
# name: math
# key: math
# --
namespace math {
  lli fact[N], finv[N], inv[N];

  void init(void)
  {
    fact[0] = fact[1] = 1;
    finv[0] = finv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < N; i++){
      fact[i] = fact[i - 1] * i % mod;
      inv[i] = mod - inv[mod % i] * (mod / i) % mod;
      finv[i] = finv[i - 1] * inv[i] % mod;
    }
    return ;
  }

  lli mod_comb(int n, int k)
  {
    assert(n < N && k < N);
    if (n < k) return 0;
    if (n < 0 || k < 0) return 0;
    return fact[n] * (finv[k] * finv[n - k] % mod) % mod;
  }

  inline lli nCk(int n, int k)
  {
    return mod_comb(n, k);
  }

  // n個の箱にm個の何かを分配する場合の数
  inline lli nHm(int n, int m)
  {
    return nCk(n + m - 1, m);
  }
};

namespace math {
  lli extgcd(lli a, lli b, lli& x, lli& y)
  {
    lli g = a;
    x = 1;
    y = 0;
    if (b != 0) {
      g = extgcd(b, a % b, y, x);
      y -= (a / b) * x;
    }
    return g;
  }

  lli mod_inverse(lli a, lli m)
  {
    lli x, y;
    extgcd(a, m, x, y);
    return (m + x % m) % m;
  }

  lli mod_pow(lli n, lli p, lli M = mod)
  {
    if (p == 0) return 1;
    if (p == 1) return n % M;
    lli m = mod_pow(n, p / 2, M);
    m *= m;
    m %= M;
    if (p % 2) m = (m * n) % M;
    return m;
  }

  // ai * x = bi (mod mi)
  // 蟻本P.261
  // x=b(mod m)の(b,m)を返す
  pair<lli, lli> liner_congruence(const vector<lli>& A, const vector<lli>& B, const vector<lli>& M)
  {
    lli x = 0, m = 1;
    for (int i = 0; i < A.size(); ++i) {
      lli a = A[i] * m;
      lli b = B[i] - A[i] * x;
      lli d = __gcd(M[i], a);
      if (b % d) return make_pair(-1, -1);
      lli t = b / d * mod_inverse(a / d, M[i] / d) % (M[i] / d);
      x = x + m * t;
      m *= M[i] / d;
    }
    return {x % m, m};
  }

  // bi = r (mod mi)となる(r,mod)を返す
  // 解なしなら(0,-1)
  pair<lli, lli> chinese_remainder_theorem(const vector<lli> &b, const vector<lli> &m)
  {
    lli r = 0;
    lli M = 1;
    for (int i = 0; i < b.size(); ++i) {
      lli p, q;
      lli d = extgcd(M, m[i], p, q);
      if ((b[i] - r) % d != 0) return make_pair(0, -1);
      lli tmp = (b[i] - r) / d * p % (m[i]/d);
      r += M * tmp;
      M *= m[i]/d;
    }
    return make_pair((r + M) % M, M);
  }

  // https://manabitimes.jp/math/1324
  // 充分に小さい素数pを指定すること。
  lli lucas(int n, int m, int p)
  {
    lli x = 1;
    while (n || m) {
      x *= math::mod_comb(n % p, m % p);
      x %= p;
      n /= p;
      m /= p;
    }
    return x;
  }
};

namespace math {
  // nと互いに素である1以上n以下の自然数の個数
  // オイラーの定理 x^φ(m)≡1(mod m) xとmは互いに素
  template<typename T=long long int>
  T euler_phi(T n)
  {
    T x = n;
    for (T i = 2; i * i <= n; ++i) {
      if (n % i == 0) {
        while (n % i == 0) n /= i;
        x -= x / i;
      }
    }
    if (n != 1) x -= x / n;
    return x;
  }

  lli isqrt(lli x)
  {
    lli sqrtx = sqrt(x) - 1;
    while (sqrtx + 1 <= x / (sqrtx + 1)) {
      sqrtx++;
    }
    return sqrtx;
  }

  // 約数列挙
  // https://qiita.com/drken/items/3beb679e54266f20ab63#4-2-%E9%AB%98%E9%80%9F%E7%B4%84%E6%95%B0%E5%88%97%E6%8C%99
}

namespace math {
  const int N = 500 + 3;
  lli nck[N][N];
  void init(void)
  {
    fill(&nck[0][0], &nck[N - 1][N - 1] + 1, 0);
    nck[0][0] = 1;
    for (int i = 0; i + 1 < N; ++i) {
      for (int j = 0; j < i + 1; ++j) {
        (nck[i + 1][j] += nck[i][j]) %= mod;
        (nck[i + 1][j + 1] += nck[i][j]) %= mod;
      }
    }
    return ;
  }
};

namespace math {
  struct Matrix {
    vec<vec<lli>> val;
    Matrix(int n) {
      assert(0 < n);
      val.resize(n, vec<lli>(n, 0));
    }
    Matrix(int h, int w) {
      assert(0 < h && 0 < w);
      val.resize(h, vec<lli>(w, 0));
    }
    Matrix(vec<vec<lli>> v) : val(v) {}
    size_t h(void) const { return val.size(); }
    size_t w(void) const { return val[0].size(); }
    lli& at(int i, int j) { return val.at(i).at(j); }

    static Matrix E(int n) ;
    static Matrix pow(Matrix a, lli p) ;
  };
  Matrix operator * (Matrix a, Matrix b) {
    assert(a.w() == b.h());
    Matrix c(a.h(), b.w());
    for (int k = 0; k < b.h(); ++k) {
      for (int i = 0; i < c.h(); ++i) {
        for (int j = 0; j < c.w(); ++j) {
          (c.at(i, j) += a.at(i, k) * b.at(k, j) % mod) %= mod;
        }
      }
    }
    return c;
  }
  Matrix Matrix::E(const int n) {
    Matrix e(n, n);
    for (int i = 0; i < n; ++i) {
      e.at(i, i) = 1;
    }
    return e;
  }
  Matrix Matrix::pow(Matrix a, lli p) {
    if (p == 0) return Matrix::E(a.h());
    if (p == 1) return a;
    Matrix b = Matrix::pow(a, p / 2);
    b = b * b;
    if (p % 2) b = b * a;
    return b;
  }
};
