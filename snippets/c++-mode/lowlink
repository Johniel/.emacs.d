# -*- mode: snippet -*-
# name: bridge and articulation points
# key: lowlink
# --
struct LowLink {
  // 橋: ABC266F
  // 関節点: ARC045D
  using graph = vector<vector<int>>;
  vector<bool> vis;
  vector<int> ord, low;
  vector<pair<int, int>> bs; // bridges
  vector<int> as; // articulation points
  graph g;
  void run(const graph& g_)
  {
    g = g_;
    const int n = g.size();
    vis.resize(n, false);
    ord.resize(n, 0);
    low.resize(n, 0);
    int k = 0;
    for (int i = 0; i < n; ++i) {
      if (!vis[i]) k = rec(i, k, -1);
    }
    sort(as.begin(), as.end());
    sort(bs.begin(), bs.end());
  }
  int rec(int curr, int k, int prev)
  {
    vis[curr] = true;
    ord[curr] = k++;
    low[curr] = ord[curr];
    bool f = false;
    int cnt = 0;
    for (auto &next: g[curr]) {
      if (next == prev) continue;
      if (vis[next]) { // 後退辺
        low[curr] = min(low[curr], ord[next]);
      } else {
        ++cnt;
        k = rec(next, k, curr);
        low[curr] = min(low[curr], low[next]);
        f = f || (prev != -1 && ord[curr] <= low[next]);
        if (ord[curr] < low[next]) {
          bs.push_back({min(curr, next), max(curr, next)});
        }
      }
    }
    if (prev == -1 && 2 <= cnt) f = true;
    if (f) as.push_back(curr);
    return k;
  }
};

// 橋を除いた部分グラフ
// ARC039D
vector<vector<int>> two_edge_connected_components(const vector<vector<int>>& graph)
{
  LowLink ll;
  ll.run(graph);
  set<pair<int, int>> bridges(ll.bs.begin(), ll.bs.end());
  const int n = graph.size();
  UnionFind uf(n);
  for (int i = 0; i < graph.size(); ++i) {
    for (int k = 0; k < graph[i].size(); ++k) {
      int j = graph[i][k];
      pair<int, int> a = make_pair(i, j);
      pair<int, int> b = make_pair(j, i);
      unless (bridges.count(a) || bridges.count(b)) {
        uf.unite(i, j);
      }
    }
  }
  for (int i = 0; i < n; ++i) uf.find(i);
  vector<vector<int>> component;
  map<int, int> c;
  for (int i = 0; i < n; ++i) {
    int x = uf.find(i);
    if (!c.count(x)) {
      c[x] = c.size();
      component.push_back(vector<int>());
    }
    component[c[x]].push_back(i);
  }
  return component;
}
