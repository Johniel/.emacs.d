# -*- mode: snippet -*-
# name: suffyx array
# key: suffyxarray
# --
struct SuffixArray {
  vector<int> rank;
  vector<int> idx;
  const int n;
  SuffixArray(const string& s) : n(s.size()) {
    rank.resize(n + 1);
    idx.resize(n + 1);
    for (int i = 0; i <= s.size(); ++i) {
      idx[i] = i;
      rank[i] = i < n ? s[i] : -1;
    }
    vector<int> tmp(n + 1);
    for (int radix = 1; radix <= n; radix *= 2) {
      auto cmp = [&] (auto i, auto j) {
        if (rank[i] != rank[j]) return rank[i] < rank[j];
        int ri = (i + radix <= n ? rank[i + radix] : -1);
        int rj = (j + radix <= n ? rank[j + radix] : -1);
        return ri < rj;
      };
      sort(idx.begin(), idx.end(), cmp);
      tmp[idx[0]] = 0;
      for (int i = 1; i <= n; ++i) {
        tmp[idx[i]] = tmp[idx[i - 1]] + cmp(idx[i - 1], idx[i]);
      }
      copy(tmp.begin(), tmp.end(), rank.begin());
    }
  }
  int operator [] (int i) const { return idx.at(i); }
  int lower_bound(const string& s, const string& query) const {
    int small = 0;
    int large = idx.size();
    while (small + 1 < large) {
      int mid = (small + large) / 2;
      if (s.compare(idx[mid], query.size(), query) < 0) small = mid;
      else large = mid;
    }
    return large;
  }
  vector<int> build_lcp(const string& s) {
    rank.resize(n + 1);
    for (int i = 0; i < rank.size(); ++i) rank[idx[i]] = i;

    int h = 0;
    vector<int> lcp(n);
    lcp[0] = 0;
    for (int i = 0; i < n; ++i) {
      int j = idx[rank[i] - 1];
      if (0 < h) --h;
      for (; j + h < n && i + h < n; ++h) {
        if (s[j + h] != s[i + h]) break;
      }
      lcp[rank[i] - 1] = h;
    }
    return lcp;
  }
  void show(string s) const {
    cout << idx << endl;
    for (int i = 0; i < idx.size(); ++i) cout << s.substr(idx[i]) << "$" << endl;
    return ;
  }
};
