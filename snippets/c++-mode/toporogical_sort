# -*- mode: snippet -*-
# name: toporogical_sort
# key: tsort
# --
struct E{ int src, dst; };
typedef vector<vector<E>> G;

bool visit(const G &g, int curr, vector<int> &order, vector<int> &color)
{
  constexpr int CLOSED = 1;
  constexpr int VISITED = 2;

  color[curr] = CLOSED;
  each (e, g[curr]) {
    if (color[e.dst] == VISITED) continue;
    if (color[e.dst] == CLOSED) return false;
    if (!visit(g, e.dst, order, color)) return false;
  }
  order.push_back(curr);
  color[curr] = VISITED;
  return true;
}

// verified Codeforces Round #847 C
bool toporogical_sort(const G &g, vector<int> &order)
{
  const int size = g.size();
  vec<int> color(size, 0);
  for (int i = 0; i < size; ++i) {
    if (!color[i] && !visit(g, i, order, color)) {
      return false;
    }
  }
  reverse(order.begin(), order.end());
  return true;
}
