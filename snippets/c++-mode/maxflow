# -*- mode: snippet -*-
# name: max flow
# key: maxflow
# --
struct E {
  int src, dst;
  E() { src = dst = -1; }
  E(int s, int d) : src(s), dst(d) {}
  E rev(void) const { return E(dst, src); }
};

inline bool operator < (const E& a, const E& b)
{
  if (a.src != b.src) return a.src < b.src;
  return a.dst < b.dst;
}

inline bool operator == (const E& a, const E& b) { return a.dst == b.dst && a.src == b.src; }
inline bool operator != (const E& a, const E& b) { return !(a == b); }

template<int N>
struct MaxFlow {
  array<vector<E>, N> g;
  // MEMO: do not use parallel edge
  map<E, lli> cap;
  map<E, lli> flow;
  void init(void)
  {
    fill(g.begin(), g.end(), vector<E>());
    cap.clear();
    flow.clear();
    return ;
  }

  void add_edge(int src, int dst, lli c)
  {
    E a(src, dst);
    E b = a.rev();
    g[a.src].push_back(a);
    g[b.src].push_back(b);
    cap[a] = c;
    cap[b] = 0;
    flow[a] = flow[b] = 0;
    return ;
  }

  lli run(const int src, const int snk)
  {
    lli sum = 0;
    while (true) {
      E path[N] = {E(), };
      set<int> vis({src});
      queue<int> q;
      for (q.push(src); q.size(); q.pop()) {
        each (e, g[q.front()]) {
          if (!vis.count(e.dst) && 0 < cap[e] - flow[e]) {
            q.push(e.dst);
            vis.insert(e.dst);
            path[e.dst] = e;
          }
        }
      }
      if (!vis.count(snk)) break;
      lli mn = (1LL << 60) + 5;
      for (E e = path[snk]; e != E(); e = path[e.src]) {
        mn = min(mn, cap[e] - flow[e]);
      }
      for (E e = path[snk]; e != E(); e = path[e.src]) {
        flow[e] += mn;
        flow[e.rev()] -= mn;
      }
      sum += mn;
    }

    return sum;
  }

  pair<lli, vec<E>> min_cut(int src, int snk)
  {
    lli f = run(src, snk);
    queue<int> q;
    set<int> vis({src});
    for (q.push(src); q.size(); q.pop()) {
      const int curr = q.front();
      each (e, g[curr]) {
        if (!vis.count(e.dst) && 0 < cap[e] - flow[e]) {
          q.push(e.dst);
          vis.insert(e.dst);
        }
      }
    }
    vec<E> es;
    for (int i = 0; i < N; ++i) {
      each (e, g[i]) {
        if (vis.count(e.src) && !vis.count(e.dst) && cap[e] && cap[e] == flow[e]) {
          es.push_back(e);
        }
      }
    }
    return make_pair(f, es);
  }
};
