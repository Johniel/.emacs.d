# -*- mode: snippet -*-
# name: prime number
# key: prime
# --
const int N = 1e5 + 5;
static bool prime[N];
fill(prime, prime + N, true);
prime[0] = prime[1] = false;
for (int i = 2; i * i < N; ++i) {
  for (int j = 2; i * j < N; ++j) {
    prime[i * j] = false;
  }
}
vector<int> p;
for (int i = 0; i < N; ++i) {
  if (prime[i]) p.push_back(i);
}
{ // segment sieve
  assert(L < R);
  vec<int> is_composite(R - L, 0); // 合成数
  vec<int> is_prime_power(R - L, 0); // 素数の累乗、素数冪
  each (p, ps) {
    lli x = (L / p) * p;
    if (x < L) x = ((L / p) + 1) * p;
    for (; x < R; x += p) {
      if (is_composite[x - L]) continue;
      is_composite[x - L] = 1;
      lli y = x;
      while (y  == 0) y /= p;
      is_prime_power[x - L] += (y == 1);
    }
  }
}
